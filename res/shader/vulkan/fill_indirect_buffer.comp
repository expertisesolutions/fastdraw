#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

//layout(location = 0) in vec4 inPosition;
//layout(location = 1) in vec2 inTexCoord;
//layout(location = 2) in mat4 transformMatrix;
//layout(location = 6) in uint zindex;
//layout(location = 7) in uint zindex_chain_size;
//layout(location = 0) out vec2 fragTexCoord;
//layout(location = 1) out flat uint out_zindex;

// buffer with parameters to create indirect buffer
// zindex chain is the whole chain from the square (?)
// and if so, how?
layout(std430, binding = 3) buffer zindex_chain_layout
{
  uint zindex_chain_size;
  uint zindex_chain[]; // indexed by zindex
};
struct image_info
{
  uint ii_zindex;
  uint ii_x, ii_y, ii_w, ii_h;
  uint alpha_compositing;
  uint found_alpha;
};
// information about all images
layout  (std430, binding = 4) buffer image_infos
{
  image_info ii[];
};
struct VkDrawIndirectCommand
{
  uint vertex_count;
  uint instance_count;
  uint first_vertex;
  uint first_instance;
};
// buffers to be instantiated
layout (std430, binding = 5) buffer indirect_commands_buffer
{
  VkDrawIndirectCommand indirect_commands[];
};

void main() {
  // gl_Position = inPosition;
  // fragTexCoord = inTexCoord;
  // out_zindex = zindex;

  // go through zindex chain
  for (uint i = zindex_chain_size-1; i != -1; --i)
  {
    indirect_commands[i].vertex_count = 6;
    indirect_commands[i].instance_count = 2;
    indirect_commands[i].first_vertex = 0;
    indirect_commands[i].first_instance = 0;
  }  
}
